name: Linkwatch CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Verify dependencies
      run: go mod verify

    - name: Run linter
      run: |
        go install golang.org/x/lint/golint@latest
        golint -set_exit_status ./...

    - name: Run vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build and Verify
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: Build application
      run: go build -v ./...

    - name: Build Docker image
      run: docker build -t linkwatch:test .

    - name: Verify Docker Compose
      run: |
        # Check if docker compose (integrated) is available
        docker compose version || echo "Docker Compose not available, trying standalone version"
        
        # If not available, install standalone docker-compose
        if ! docker compose version >/dev/null 2>&1; then
          echo "Installing standalone docker-compose..."
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
        fi

    - name: Test Docker image (Basic)
      run: |
        # Start container in background
        docker run -d --name linkwatch-test -p 8080:8080 linkwatch:test
        
        # Wait for service to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8080/healthz || exit 1
        
        # Clean up
        docker stop linkwatch-test
        docker rm linkwatch-test

    - name: Test Docker image (With API)
      run: |
        # Start container with persistent volume
        docker run -d --name linkwatch-test-api -p 8081:8080 -v linkwatch-test-data:/app/data linkwatch:test
        
        # Wait for service to start
        sleep 15
        
        # Test health endpoint
        curl -f http://localhost:8081/healthz || exit 1
        
        # Test API endpoints
        curl -f -X POST http://localhost:8081/v1/targets \
          -H "Content-Type: application/json" \
          -H "Idempotency-Key: test-key-123" \
          -d '{"url": "https://httpbin.org/status/200"}' || exit 1
        
        # Test listing targets
        curl -f http://localhost:8081/v1/targets || exit 1
        
        # Clean up
        docker stop linkwatch-test-api
        docker rm linkwatch-test-api
        docker volume rm linkwatch-test-data

    - name: Test Docker Compose
      run: |
        # Try docker compose (integrated) first, fallback to docker-compose (standalone)
        if docker compose version >/dev/null 2>&1; then
          echo "Using integrated docker compose"
          COMPOSE_CMD="docker compose"
        else
          echo "Using standalone docker-compose"
          COMPOSE_CMD="docker-compose"
        fi
        
        # Start with docker compose
        $COMPOSE_CMD up -d
        
        # Wait for service to start
        sleep 20
        
        # Test health endpoint
        curl -f http://localhost:8080/healthz || exit 1
        
        # Test API endpoints
        curl -f -X POST http://localhost:8080/v1/targets \
          -H "Content-Type: application/json" \
          -H "Idempotency-Key: compose-test-key" \
          -d '{"url": "https://httpbin.org/status/200"}' || exit 1
        
        # Test listing targets
        curl -f http://localhost:8080/v1/targets || exit 1
        
        # Stop docker compose
        $COMPOSE_CMD down -v
